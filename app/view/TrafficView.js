/*
 * File: app/view/TrafficView.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('app.view.TrafficView', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.TrafficView',

    requires: [
        'app.view.TrafficViewViewModel',
        'Ext.form.Panel',
        'Ext.chart.CartesianChart',
        'Ext.chart.axis.Category',
        'Ext.chart.axis.Numeric',
        'Ext.chart.series.Line',
        'Ext.chart.interactions.PanZoom'
    ],

    viewModel: {
        type: 'trafficview'
    },
    title: '流量监控',
    defaultListenerScope: true,

    listeners: {
        beforeactivate: 'onPanelBeforeActivate1'
    },
    items: [
        {
            xtype: 'form',
            bodyPadding: 10,
            header: false,
            title: 'My Form',
            items: [
                {
                    xtype: 'cartesian',
                    shadow: true,
                    height: 300,
                    id: 'trafficeline',
                    animation: false,
                    colors: [
                        '#115fa6',
                        '#94ae0a',
                        '#a61120',
                        '#ff8809',
                        '#ffd13e',
                        '#a61187',
                        '#24ad9a',
                        '#7c7474',
                        '#a66111'
                    ],
                    store: 'StoreNetTraffic',
                    axes: [
                        {
                            type: 'category',
                            fields: [
                                'time'
                            ],
                            position: 'bottom'
                        },
                        {
                            type: 'numeric',
                            labelInSpan: false,
                            minimum: 0,
                            position: 'left'
                        }
                    ],
                    series: [
                        {
                            type: 'line',
                            style: {
                                stroke: '#ff0000'
                            },
                            xField: 'time',
                            yField: [
                                'sent'
                            ],
                            smooth: 3
                        },
                        {
                            type: 'line',
                            style: {
                                stroke: '#00FF00'
                            },
                            xField: 'time',
                            yField: [
                                'received'
                            ],
                            smooth: 3
                        }
                    ],
                    interactions: [
                        {
                            type: 'panzoom'
                        }
                    ]
                }
            ]
        }
    ],

    onPanelBeforeActivate1: function(component, eOpts) {
        var chart =this.down('chart');
        var dataArr = [];
        var sendByte = -1;
        var rtByte = -1;
        var store = new Ext.data.ArrayStore({
                    fields: ['received','sent', 'time'],
                    data: dataArr
        });
        this.query("cartesian[id=trafficeline]")[0].setStore(store);
        Ext.require('app.store.StoreNetTraffic',function(){
            var s = Ext.create('app.store.StoreNetTraffic');

            var task = {
               run: function(){
                s.load({callback:function(r){
                    if (sendByte == -1)
                    {
                        sendByte = r[0].data.sent;
                        rtByte = r[0].data.received;
                        return ;
                    }

                    dataArr.push([r[0].data.received -rtByte,r[0].data.sent -sendByte, r[0].data.time]);
                    if (dataArr.length>20)
                    {
                       dataArr = dataArr.slice(1);
                    }
                    sendByte = r[0].data.sent;
                    rtByte = r[0].data.received;
                    store.loadData(dataArr);
                    chart.redraw();
                }});
            },
                interval: 3000
            };
            task.run();
            Ext.TaskManager.start(task);

        });


    }

});